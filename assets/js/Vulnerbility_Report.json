{"@version":"2.10.0","@generated":"Sat, 19 Jun 2021 11:21:52","site":[{"@name":"https://petstore.swagger.io","@host":"petstore.swagger.io","@port":"443","@ssl":"true","alerts":[{"pluginid":"10096","alertRef":"10096","alert":"Timestamp Disclosure - Unix","name":"Timestamp Disclosure - Unix","riskcode":"0","confidence":"1","riskdesc":"Informational (Low)","desc":"<p>A timestamp was disclosed by the application/web server - Unix<\/p>","instances":[{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"57410844"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"16432776"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"12006459"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"26431849"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"67931064"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"10125357"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"1100010015"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"1100001007"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"53604398"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"50169593"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"1100001001"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"56945142"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"40373089"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"59776930"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"69870786"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"70525674"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"67219890"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"17489195"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"51726849"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"49080748"}],"count":"121","solution":"<p>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.<\/p>","otherinfo":"<p>57410844, which evaluates to: 1971-10-27 11:27:24<\/p>","reference":"<p>http://projects.webappsec.org/w/page/13246936/Information%20Leakage<\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"10015","alertRef":"10015","alert":"Incomplete or No Cache-control Header Set","name":"Incomplete or No Cache-control Header Set","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.<\/p>","instances":[{"uri":"https://petstore.swagger.io/v2/pet/10","method":"DELETE","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/user/login?username=username&password=ZAP","method":"GET","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/pet/findByTags?tags=tags","method":"GET","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/pet/10","method":"GET","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/user/logout","method":"GET","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/pet/10","method":"POST","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/pet","method":"POST","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/pet","method":"PUT","param":"Cache-Control"},{"uri":"https://petstore.swagger.io/v2/store/inventory","method":"GET","param":"Cache-Control"}],"count":"10","solution":"<p>Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.<\/p>","reference":"<p>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching<\/p><p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control<\/p>","cweid":"525","wascid":"13","sourceid":"3"},{"pluginid":"10098","alertRef":"10098","alert":"Cross-Domain Misconfiguration","name":"Cross-Domain Misconfiguration","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server<\/p>","instances":[{"uri":"https://petstore.swagger.io/v2/user/username","method":"GET","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/user/logout","method":"GET","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/pet","method":"PUT","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/user/createWithList","method":"POST","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/user/username","method":"DELETE","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/user","method":"POST","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/pet","method":"POST","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/user/createWithArray","method":"POST","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/store/inventory","method":"GET","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/pet/10","method":"GET","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/pet/10","method":"DELETE","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/store/order/10","method":"GET","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/store/order","method":"POST","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/user/login?username=username&password=ZAP","method":"GET","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/store/order/10","method":"DELETE","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/pet/findByTags?tags=tags","method":"GET","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/user/username","method":"PUT","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/pet/10","method":"POST","evidence":"Access-Control-Allow-Origin: *"},{"uri":"https://petstore.swagger.io/v2/pet/10/uploadImage","method":"POST","evidence":"Access-Control-Allow-Origin: *"}],"count":"20","solution":"<p>Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).<\/p><p>Configure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.<\/p>","otherinfo":"<p>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.<\/p>","reference":"<p>http://www.hpenterprisesecurity.com/vulncat/en/vulncat/vb/html5_overly_permissive_cors_policy.html<\/p>","cweid":"264","wascid":"14","sourceid":"3"},{"pluginid":"10021","alertRef":"10021","alert":"X-Content-Type-Options Header Missing","name":"X-Content-Type-Options Header Missing","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.<\/p>","instances":[{"uri":"https://petstore.swagger.io/v2/pet/10","method":"DELETE","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/user/login?username=username&password=ZAP","method":"GET","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/user/logout","method":"GET","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/pet/10","method":"GET","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/pet/findByTags?tags=tags","method":"GET","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/pet/10","method":"POST","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/pet/findByStatus?status=available","method":"GET","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/pet","method":"PUT","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/store/inventory","method":"GET","param":"X-Content-Type-Options"},{"uri":"https://petstore.swagger.io/v2/pet","method":"POST","param":"X-Content-Type-Options"}],"count":"10","solution":"<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.<\/p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.<\/p>","otherinfo":"<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.<\/p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.<\/p>","reference":"<p>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx<\/p><p>https://owasp.org/www-community/Security_Headers<\/p>","cweid":"693","wascid":"15","sourceid":"3"},{"pluginid":"10024","alertRef":"10024","alert":"Information Disclosure - Sensitive Information in URL","name":"Information Disclosure - Sensitive Information in URL","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>The request appeared to contain sensitive information leaked in the URL. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.<\/p>","instances":[{"uri":"https://petstore.swagger.io/v2/user/login?username=username&password=ZAP","method":"GET","param":"password","evidence":"password"},{"uri":"https://petstore.swagger.io/v2/user/login?username=username&password=ZAP","method":"GET","param":"username","evidence":"username"}],"count":"2","solution":"<p>Do not pass sensitive information in URIs.<\/p>","otherinfo":"<p>The URL contains potentially sensitive information. The following string was found via the pattern: pass<\/p><p>password<\/p>","reference":"<p><\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"40012","alertRef":"40012","alert":"Cross Site Scripting Weakness (Reflected in JSON Response)","name":"Cross Site Scripting Weakness (Reflected in JSON Response)","riskcode":"1","confidence":"1","riskdesc":"Low (Low)","desc":"<p>A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).<\/p>","instances":[{"uri":"https://petstore.swagger.io/v2/pet","method":"POST","param":"photoUrls[0]","attack":"<script>alert(1);<\/script>"},{"uri":"https://petstore.swagger.io/v2/pet","method":"POST","param":"status","attack":"<script>alert(1);<\/script>"},{"uri":"https://petstore.swagger.io/v2/pet","method":"POST","param":"name","attack":"<script>alert(1);<\/script>"}],"count":"3","solution":"<p>Phase: Architecture and Design<\/p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.<\/p><p>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.<\/p><p><\/p><p>Phases: Implementation; Architecture and Design<\/p><p>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.<\/p><p>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.<\/p><p>Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.<\/p><p><\/p><p>Phase: Architecture and Design<\/p><p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.<\/p><p><\/p><p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.<\/p><p><\/p><p>Phase: Implementation<\/p><p>For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.<\/p><p><\/p><p>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.<\/p><p><\/p><p>Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.<\/p><p><\/p><p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"<\/p><p><\/p><p>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.<\/p>","otherinfo":"<p>Raised with LOW confidence as the Content-Type is not HTML<\/p>","reference":"<p>http://projects.webappsec.org/Cross-Site-Scripting<\/p><p>http://cwe.mitre.org/data/definitions/79.html<\/p>","cweid":"79","wascid":"8","sourceid":"1"},{"pluginid":"6","alertRef":"6","alert":"Path Traversal","name":"Path Traversal","riskcode":"3","confidence":"1","riskdesc":"High (Low)","desc":"<p>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.<\/p><p><\/p><p>Most web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.<\/p><p><\/p><p>The most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.<\/p><p><\/p><p>Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.<\/p>","instances":[{"uri":"https://petstore.swagger.io/v2/pet/10","method":"POST","param":"status","attack":"10"}],"count":"1","solution":"<p>Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.<\/p><p><\/p><p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"<\/p><p><\/p><p>For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.<\/p><p><\/p><p>Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. <\/p><p><\/p><p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.<\/p><p><\/p><p>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.<\/p><p><\/p><p>Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.<\/p><p><\/p><p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.<\/p><p><\/p><p>Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.<\/p><p><\/p><p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.<\/p><p><\/p><p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.<\/p>","otherinfo":"<p>Check 5<\/p>","reference":"<p>http://projects.webappsec.org/Path-Traversal<\/p><p>http://cwe.mitre.org/data/definitions/22.html<\/p>","cweid":"22","wascid":"33","sourceid":"1"}]}]}